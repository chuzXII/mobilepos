diff --git a/node_modules/react-native-alert-notification/src/config/ENV.ts b/node_modules/react-native-alert-notification/src/config/ENV.ts
index c2784be..b2b70af 100644
--- a/node_modules/react-native-alert-notification/src/config/ENV.ts
+++ b/node_modules/react-native-alert-notification/src/config/ENV.ts
@@ -14,6 +14,7 @@ enum ALERT_TYPE {
   DANGER = 'DANGER',
   WARNING = 'WARNING',
   INFO = 'INFO',
+  CONFIRM = 'CONFIRM',
 }
 
 enum TOAST_POSITION {
diff --git a/node_modules/react-native-alert-notification/src/containers/Dialog.tsx b/node_modules/react-native-alert-notification/src/containers/Dialog.tsx
index a6afe15..1aa5d26 100644
--- a/node_modules/react-native-alert-notification/src/containers/Dialog.tsx
+++ b/node_modules/react-native-alert-notification/src/containers/Dialog.tsx
@@ -11,6 +11,8 @@ export type IConfigDialog = {
   autoClose?: number | boolean;
   closeOnOverlayTap?: boolean;
   onPressButton?: () => void;
+  onPressYes?: () => void; // Menambahkan onPressYes untuk tombol 'Ya'
+  onPressNo?: () => void;  // Menambahkan onPressNo untuk tombol 'Tidak'
   onShow?: () => void;
   onHide?: () => void;
 };
@@ -28,48 +30,21 @@ type IState = {
 };
 
 export class Dialog extends React.Component<IProps, IState> {
-  /**
-   * @type {React.RefObject<Dialog>}
-   */
   public static instance: React.RefObject<Dialog> = React.createRef();
 
-  /**
-   * @param {IConfig} args
-   */
   public static show = (args: IConfigDialog): void => {
     Dialog.instance.current?._open(args);
   };
 
-  /**
-   *
-   */
   public static hide = (): void => {
     Dialog.instance.current?._close();
   };
 
   private _timeout?: NodeJS.Timeout;
-
-  /**
-   * @type {Animated.Value}
-   * @private
-   */
   private readonly _opacity: Animated.Value;
-
-  /**
-   * @type {Animated.Value}
-   * @private
-   */
   private readonly _positionDialog: Animated.Value;
-
-  /**
-   * @type {number}
-   * @private
-   */
   private _popupHeight: number;
 
-  /**
-   * @param {IProps} props
-   */
   constructor(props: IProps) {
     super(props);
     this._opacity = new Animated.Value(0);
@@ -82,19 +57,12 @@ export class Dialog extends React.Component<IProps, IState> {
     };
   }
 
-  /**
-   * @param {Readonly<IProps>} prevProps
-   */
   public componentDidUpdate = (prevProps: Readonly<IProps>): void => {
     if (prevProps.isDark !== this.props.isDark) {
-      // eslint-disable-next-line react/no-did-update-set-state
       this.setState((prevState) => ({ ...prevState, styles: __styles(this.props.isDark) }));
     }
   };
 
-  /**
-   * @param {IConfig} config
-   */
   private _open = async (config: IConfigDialog): Promise<void> => {
     if (this.state.visible) {
       if (this._timeout) {
@@ -109,9 +77,6 @@ export class Dialog extends React.Component<IProps, IState> {
     this.setState((prevState) => ({ ...prevState, visible: true, config }));
   };
 
-  /**
-   * @return {Promise<void>}
-   */
   private _close = async (): Promise<void> => {
     if (!this.state.visible) {
       return;
@@ -126,9 +91,6 @@ export class Dialog extends React.Component<IProps, IState> {
     onHide?.();
   };
 
-  /**
-   * @return {Promise<void>}
-   */
   private _showModalHandler = async (): Promise<void> => {
     await this._startAnimation(ACTION.OPEN);
     const autoClose = this.state.config?.autoClose !== undefined ? this.state.config?.autoClose : this.props.config?.autoClose;
@@ -141,11 +103,6 @@ export class Dialog extends React.Component<IProps, IState> {
     this.state.config!.onShow?.();
   };
 
-  /**
-   * @param {ACTION} action
-   * @param opacity
-   * @return {Promise<void>}
-   */
   private _startAnimation = (action: ACTION, opacity: boolean = true): Promise<void> => {
     const open = action === ACTION.OPEN;
 
@@ -173,12 +130,10 @@ export class Dialog extends React.Component<IProps, IState> {
     });
   };
 
-  /**
-   * @return {JSX.Element}
-   */
   private _buttonRender = (): JSX.Element => {
     const { styles } = this.state;
-    const { type, onPressButton, button } = this.state.config!;
+    const { type, onPressButton, button, onPressYes, onPressNo } = this.state.config!;
+    
     if (button) {
       return (
         <TouchableOpacity style={StyleSheet.flatten([styles.button, styles[type]])} onPress={onPressButton ?? this._close}>
@@ -186,23 +141,31 @@ export class Dialog extends React.Component<IProps, IState> {
         </TouchableOpacity>
       );
     }
+
+    // Menambahkan tombol "Ya" dan "Tidak" untuk dialog konfirmasi
+    if (this.state.config?.type === ALERT_TYPE.CONFIRM) {
+      return (
+        <View style={{ flexDirection: 'row', justifyContent: 'space-between' }}>
+          <TouchableOpacity style={StyleSheet.flatten([styles.button, styles[type]])} onPress={onPressYes ?? this._close}>
+            <Text style={styles.buttonLabel}>Ya</Text>
+          </TouchableOpacity>
+          <TouchableOpacity style={StyleSheet.flatten([styles.button, styles[type]])} onPress={onPressNo ?? this._close}>
+            <Text style={styles.buttonLabel}>Tidak</Text>
+          </TouchableOpacity>
+        </View>
+      );
+    }
+
     return <></>;
   };
 
-  /**
-   * @return {JSX.Element}
-   */
   private _OverlayCloseRender = (): JSX.Element => {
     if (this.state.config?.closeOnOverlayTap === false ? false : this.props.config?.closeOnOverlayTap !== false) {
-      // eslint-disable-next-line react-native/no-inline-styles
       return <TouchableOpacity onPressIn={this._close} style={{ flex: 1 }} />;
     }
     return <></>;
   };
 
-  /**
-   * @return {JSX.Element}
-   */
   private _CardRender = (): JSX.Element => {
     if (!this.state.config) {
       return <></>;
@@ -235,9 +198,6 @@ export class Dialog extends React.Component<IProps, IState> {
     );
   };
 
-  /**
-   * @return {JSX.Element}
-   */
   public render = (): JSX.Element => {
     const { visible, styles } = this.state;
     const { _OverlayCloseRender, _CardRender } = this;
@@ -313,6 +273,9 @@ const __styles = (isDark: boolean) =>
     [ALERT_TYPE.INFO]: {
       backgroundColor: Color.get('info', isDark),
     },
+    [ALERT_TYPE.CONFIRM]: {
+      backgroundColor: Color.get('info', isDark),
+    },
     backendImage: {
       position: 'absolute',
       alignSelf: 'center',
